import logging
from urllib.parse import urlsplit
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2AuthorizationCodeBearer, SecurityScopes
import jwt
from dependency_injector.wiring import Provide, inject

from models.comment import CommentPostBody
from models.security import JWTokenData, ScopeEnum
from utils.container import Container


def remove_search_hash_from_url(featureUrl: str):
    """
    Removes the search part (starting with ?)
    and the hash part (starting with #) from a given URL
    """
    try:
        split_url = urlsplit(featureUrl)
    except Exception:
        logging.error("Feature URL middleware::Invalid feature URL")
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail="Invalid feature URL",
        )
    split_url = split_url._replace(query="", fragment="")
    return split_url.geturl()


def comment_body_treatment(comment_body: CommentPostBody):
    comment_body.feature_url = remove_search_hash_from_url(comment_body.feature_url)
    return comment_body


oauth2_scheme = OAuth2AuthorizationCodeBearer(
    # These urls are only for the autogenerated docs
    authorizationUrl="See app config",
    tokenUrl="/api/v1/token",
    scopes={
        ScopeEnum.CLIENT.value: "Check if the modal should be displayed and post user comments.",
        ScopeEnum.DATA.value: "Read comments, projects, rules and statistics.",
    },
)


@inject
def check_jwt(
    security_scopes: SecurityScopes,
    token: str = Depends(oauth2_scheme),
    config=Depends(Provide[Container.config]),
):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
    exception_headers = {"WWW-Authenticate": authenticate_value}

    try:
        payload = jwt.decode(
            token,
            config["secret_key"],
            algorithms=["HS256"],
            options={"require": ["exp"]},
        )
        token_data = JWTokenData(scopes=payload.get("scopes", []))
    except jwt.ExpiredSignatureError:
        logging.error("JWT is expired")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token is expired",
            headers=exception_headers,
        )
    except Exception:
        # JWT could not be decoded, doesn't have an exp or scopes claims, or the claims are invalid
        logging.error("Invalid JWT")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
            headers=exception_headers,
        )

    # Checking if the JWT has the scopes required for this route
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            logging.error("Unauthorized JWT scope")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Not enough permissions",
                headers=exception_headers,
            )
